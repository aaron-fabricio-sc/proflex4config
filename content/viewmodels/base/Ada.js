/**
 @preserve
 Copyright (c) 2001-2021 by Wincor Nixdorf International GmbH,
 Heinz-Nixdorf-Ring 1, 33106 Paderborn, Germany

 This software is the confidential and proprietary information
 of Diebold Nixdorf.
 You shall not disclose such Confidential Information and shall
 use it only in accordance with the terms of the license agreement
 you entered into with Diebold Nixdorf.

$MOD$ Ada.js 4.3.1-210614-21-db8848bb-1a04bc7d
*/
define(["jquery","knockout","flexuimapping","ui-content","vm-container","vm-util/UICommanding","extensions"],(function(e,a,t,i,d,s,n){"use strict";console.log("AMD:Ada");const o=Wincor.UI.Diagnostics.LogProvider,l=Wincor.UI.Service.Provider.AdaService,T=Wincor.UI.Service.Provider.ViewService;let r="*";const A={timeoutExtension:{default:100,key:"ADA_TimeoutExtension",plain:!0},timeoutExtensionPopup:{default:100,key:"ADA_TimeoutExtensionPopup",plain:!0},delayedContent:{default:"",key:"ADA_DelayedContent"},delayedContentTimer:{default:0,plain:!0},delayedContentText:{default:""},delayedContentTextResolved:{default:""},delayedContentTimerActive:{default:-1,plain:!0},autoRepeatTimer:{default:0,key:"ADA_AutoRepeatTimer",plain:!0},autoRepeatTimerActive:{default:0,plain:!0},initialText:{default:"",key:"ADA_InitialText"},initialTextResolved:{default:""},headline:{default:"",key:"Headline_ADA"},instruction:{default:"",key:"Instruction_ADA"},message:{default:"",key:"Message_ADA"},messageResolved:{default:""},keysText:{default:"",key:"ADA_KeysText"},keysTextResolved:{default:""},standardKeysTextResolved:{default:""},selectionKeysTextResolved:{default:""},functionKeysTextResolved:{default:""},inputText:{default:"",key:"ADA_InputText"},inputTextResolved:{default:""},dynamicText:{default:"",key:"ADA_DynamicText"},dynamicTextResolved:{default:""},echoPIN:{default:"{}",key:"ADA_EchoPIN"},macroActiveKey:{default:"",key:"ADA_MacroActiveKey"},macroInactiveKey:{default:"",key:"ADA_MacroInactiveKey"},macroActiveInput:{default:"",key:"ADA_MacroActiveInputField"},macroActiveDynamicText:{default:"",key:"ADA_MacroActiveDynamicValue"},macroCheckbox:{default:"",key:"ADA_MacroCheckbox"},macroCheckboxChecked:{default:"",key:"ADA_MacroCheckboxChecked"},macroCheckboxUnchecked:{default:"",key:"ADA_MacroCheckboxUnchecked"},macroEchoCheckbox:{default:"",key:"ADA_MacroEchoCheckbox"},checkboxText:{default:"",key:"ADA_CheckboxesText"},checkboxTextResolved:{default:""},checkboxCheckedText:{default:"",key:"ADA_CheckboxesCheckedText"},checkboxCheckedTextResolved:{default:""},checkboxUncheckedText:{default:"",key:"ADA_CheckboxesUncheckedText"},checkboxUncheckedTextResolved:{default:""},macroRepeatKey:{default:"",key:"ADA_MacroRepeatKey"},macroRepeatKeyResolved:{default:""},macroEchoKey:{default:"",key:"ADA_MacroEchoKey"},macroEchoInput:{default:"",key:"ADA_MacroEchoInput"},macro456:{default:"",key:"ADA_Macro456"},macro456Resolved:{default:""},repeatOnHelp:{default:"",key:"ADA_RepeatOnHelp"},repeatOnHelpResolved:{default:""},repeatOnHelpFixed:{default:"",key:"ADA_RepeatOnHelpFixed"},repeatOnHelpFixedResolved:{default:""},repeatOnContentChange:{default:"",key:"ADA_RepeatOnContentChange"},repeatOnContentChangeResolved:{default:""},repeatOnButtonAvailability:{default:"",key:"ADA_RepeatOnButtonAvailability"},switchInstanceText:{default:""},switchInstanceTextResolved:{default:""}};function c(){this.initialTabIndex=9999999999,this.currentTabIndex=0,this.lowestTabIndex=this.initialTabIndex,this.highestTabIndex=0,this.length=0,this.elements={},o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"> AdaElements::AdaElements()"),this.init=function(){let e,a=Object.keys(this.elements);for(e=a.length-1;e>=0;e--){let t=parseInt(a[e]);Number.isInteger(t)&&(o.LOG_DETAIL&&o.log(o.LOG_DETAIL,". AdaElements::init: checking index: "+t),t<this.lowestTabIndex&&(this.lowestTabIndex=t),t>this.highestTabIndex&&(this.highestTabIndex=t))}this.currentTabIndex=this.lowestTabIndex,this.currentCommand()&&!this.currentCommand().isActive.value()&&this.next(),o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"* AdaElements::init: current adakey: "+this.currentTabIndex),o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"* AdaElements::init: lowest  adakey: "+this.lowestTabIndex),o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"* AdaElements::init: highest adakey: "+this.highestTabIndex)},this.add=function(e,a){return e in this.elements?(a.command.isActive.value()?o.error(`AdaElements::add - element with tabIndex ${e} already exists!`):o.LOG_DETAIL&&o.log(o.LOG_DETAIL,`* AdaElements::add( ${e}, '${a}') skipping - inactive`),!1):(o.LOG_DETAIL&&o.log(o.LOG_DETAIL,`* AdaElements::add( ${e}, '${a}')`),this.length++,this.elements[e]=a,o.LOG_DETAIL&&o.log(o.LOG_DETAIL,`* AdaElements::add '${this.elements[e]}'`),!0)},this.next=function(){let a=parseInt(this.currentTabIndex)+1;for(o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"* AdaElements::next: current tabIndex: "+this.currentTabIndex);(!(a in this.elements)||!this.elements[a].command.isActive.value())&&a<=this.highestTabIndex;)o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"* AdaElements::next: skipping invalid index: "+a),a++;a>this.highestTabIndex&&(a=this.lowestTabIndex),this.currentTabIndex=a,this.currentCommand().isActive.value()?(o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"* AdaElements::next: updated adakey: "+this.currentTabIndex),e(this.elements[this.currentTabIndex].command.element.id).focus()):this.next()},this.previous=function(){let a=parseInt(this.currentTabIndex)-1;for(o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"* focus.previous: current tabIndex: "+this.currentTabIndex);(!(a in this.elements)||!this.elements[a].command.isActive.value())&&a>=this.lowestTabIndex;)o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"* focus.previous: skipping invalid index: "+a),a--;a<this.lowestTabIndex&&(a=this.highestTabIndex),this.currentTabIndex=a,this.currentCommand().isActive.value()?(o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"* AdaElements::previous: updated adakey: "+this.currentTabIndex),e(this.elements[this.currentTabIndex].command.element.id).focus()):this.previous()},this.currentCommand=function(){return o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"* AdaElements::currentCommand: adakey: "+this.currentTabIndex),o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"* elements:\n"+this.toString()),this.elements&&this.elements[this.currentTabIndex]&&this.elements[this.currentTabIndex].command?this.elements[this.currentTabIndex].command:null},this.toString=function(){let e="",a=Object.keys(this.elements);for(let t=0;t<a.length;t++)e+=a[t]+"="+this.elements[a[t]].toString()+"\n";return e},o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"< AdaElements::AdaElements")}const h=function(){this.type="",this.command=null,this.toString=function(){return"{"+this.type+": "+this.command.id+"}"}};return i.Ada=new function(){this.vm=null,this.deactivatedForAda=!1,this._adaEnabled=!1,this._adaPrepared=!1,this._adaInputFieldSubscriptions={},this._adaViewStateSubscriptions={},this._suspendAdaInputFieldSubscriptions=!1,this._adaModeConventional=!0,this._adaModeKey="",this._doAdaTextFallbacks=!1,this._timeoutExtensionDone=!1,this._claimId456=-1,this._repeatKey="HELP",this.ADA_TYPE={HEADLINE:"headline",INSTRUCTION:"instruction",MESSAGE:"message",STANDARD_KEY:"standardKey",SELECTION_KEY:"selectionKey",FUNCTION_KEY:"functionKey",INPUTFIELD:"inputField",DYNAMIC_VALUE:"dynamicValue",CHECKBOX:"checkbox",RADIOBUTTON:"radioButton"},this._adaTextMap=Object.keys(A).reduce(((e,t)=>(e[t]=A[t].plain?A[t].default:a.observable(A[t].default),e)),Object.create(null)),this.activeItems={},Object.keys(this.ADA_TYPE).forEach((e=>{this.activeItems[this.ADA_TYPE[e]+"Count"]=a.observable(0)})),this.activeItems.activeKeyCount=a.observable(0),this._adaFocusableElements=new c,this.setViewKey=function(e){this.vm&&this.vm.setViewKey(e),r=e},this.resolveAdaKeywords=function(e,a,t){const i=/\(#(.*?)#\)/;let d={},s=(e=e?e.toString():"").match(i);let n=0;for(;n<=1e3&&s&&!(s[0]in d);){n++;let o=s[1],l="";if(l=a[o],void 0===l)l=s[0],d[s[0]]=!0;else if("function"==typeof l)if(t)try{l=l(o)}catch(e){l=""}else l=l.toString();s=(e=e.replace(s[0],l)).match(i)}return n>1e3&&o.error("Ada::resolveAdaKeywords() recursion error during replacing! MAX_DEPTH exceeded..."),e},this.prepareAda=function(e,i,n,T=""){const p=this;if(this.deactivatedForAda)return o.LOG_DETAIL&&o.log(o.LOG_DETAIL,`> Ada::prepareAda(${r}) - keyPrefix: ${n}boundViewKey: ${T}`),o.LOG_DETAIL&&o.log(o.LOG_DETAIL,". already deactivated... skipping"),void(o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"< Ada::prepareAda"));let _="";const E=function(e,i,n){let E,x=!0;if(""===(n=n||"")&&(n=t.buildGuiKey(r),x=!1),void 0===e&&(e=!0),i=i||null,o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"> Ada::doPrepareAda("+r+") - keyPrefix: "+n),!this._adaPrepared||x){let x,L=[];_&&L.push(_);let m=function(e,a){if(d.isSuspended)return;o.LOG_DETAIL&&o.log(o.LOG_DETAIL,". Ada::doPrepareAda::subscriptionOnViewStateChanged("+e+", "+a+")");let t=s.get(e);if(o.LOG_DETAIL&&o.log(o.LOG_DETAIL,". Ada::doPrepareAda::subscriptionOnViewStateChanged adaType:"+t.adaType+" repeatOnButtonAvailability:"+p._adaTextMap.repeatOnButtonAvailability()),-1!==p._adaTextMap.repeatOnButtonAvailability().indexOf("(#keys#)")||t.adaType===p.ADA_TYPE.STANDARD_KEY&&-1!==p._adaTextMap.repeatOnButtonAvailability().indexOf("(#standardKeys#)")||t.adaType===p.ADA_TYPE.SELECTION_KEY&&-1!==p._adaTextMap.repeatOnButtonAvailability().indexOf("(#selectionKeys#)")||t.adaType===p.ADA_TYPE.FUNCTION_KEY&&-1!==p._adaTextMap.repeatOnButtonAvailability().indexOf("(#functionKeys#)")){let t=p._suspendAdaInputFieldSubscriptions;window.setTimeout(function(e){if(p.mixAda(),!t){let t=s.get(e).adaKey,i=s.getCmdAdaText(e);isNaN(parseInt(t))&&!t&&(t=i);let d={adaKey:t,adaText:i,adaTextPost:s.getCmdAdaText(e,!0)};if(a){let e=p.resolveAdaKeywords(p._adaTextMap.macroActiveKey(),d);l.speak(e,1,10,null)}else{let e=p.resolveAdaKeywords(p._adaTextMap.macroInactiveKey(),d);l.speak(e,1,10,null)}}}.bind(null,e),10)}},u=function(e,a){o.LOG_DETAIL&&o.log(o.LOG_DETAIL,". Ada::doPrepareAda::subscriptionOnViewStateChanged("+e+", "+a+")");let t=s.get(e);o.LOG_DETAIL&&o.log(o.LOG_DETAIL,". Ada::doPrepareAda::subscriptionOnViewStateChanged adaType:"+t.adaType+" repeatOnButtonAvailability:"+p._adaTextMap.repeatOnButtonAvailability())};for(let e=s.cmdIds.length-1;e>=0;e--)x=s.get(s.cmdIds[e]),x.adaType&&!(x.id in this._adaViewStateSubscriptions)&&(x.adaType===this.ADA_TYPE.STANDARD_KEY||x.adaType===this.ADA_TYPE.FUNCTION_KEY||x.adaType===this.ADA_TYPE.SELECTION_KEY?this._adaViewStateSubscriptions[x.id]=x.isActive.value.subscribe(m.bind(null,x.id)):x.adaType===this.ADA_TYPE.CHECKBOX&&(this._adaViewStateSubscriptions[x.id]=x.isPressed.value.subscribe(u.bind(null,x.id))));const I=s.commands,O=s.cmdIds;let D=s.getByAdaType(this.ADA_TYPE.INPUTFIELD);for(o.LOG_DETAIL&&o.log(o.LOG_DETAIL,". Ada::doPrepareAda - commanding.getByAdaType(this.ADA_TYPE.INPUTFIELD) returned '"+D.length),E=D.length-1;E>=0;E--)null===D[E].adaText&&L.push(t.buildGuiKey(r,"InputField",D[E].id,"ADA")),a.isObservable(D[E].label)?D[E].id in this._adaInputFieldSubscriptions?o.LOG_DETAIL&&o.log(o.LOG_DETAIL,". Ada::doPrepareAda - already subscribed to command '"+D[E].id):(o.LOG_DETAIL&&o.log(o.LOG_DETAIL,". Ada::doPrepareAda - subscribing to command '"+D[E].id),this._adaInputFieldSubscriptions[D[E].id]=D[E].label.subscribe(function(e){o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"* Ada::doPrepareAda::subscription("+arguments[0]+", "+arguments[1]+")");let a=this._suspendAdaInputFieldSubscriptions;window.setTimeout(function(e){try{if(this.mixAda(),a)o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"* Ada::triggerSpeakOnObservableChange skipping speak due to this._suspendAdaInputFieldSubscriptions=true");else{let e=this._adaTextMap.macroActiveInput();this._adaTextMap.macroEchoInput()&&(e=this._adaTextMap.macroEchoInput());let a={},t=s.get(arguments[0]);o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"* Ada::triggerSpeakOnObservableChange getting '"+arguments[0]),t?(a.adaText=s.getCmdAdaText(t.id),a.value=s.getCmdLabel(t.id).toString(),a.latest=a.value.toString().trim()[a.value.toString().trim().length-1],o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"* Ada::triggerSpeakOnObservableChange myMap:'"+JSON.stringify(a,null," ")),(-1===e.indexOf("adaText")||a.adaText&&a.adaText.trim())&&(-1===e.indexOf("latest")||a.latest&&a.latest.trim())&&(-1===e.indexOf("value")||a.value&&a.value.toString().trim())?(e=this.resolveAdaKeywords(e,a),l.speak(e,2,10,null)):o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"* Ada::triggerSpeakOnObservableChange - not speaking change! Text:"+e+" with map: "+JSON.stringify(a,null," "))):o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"* Ada::triggerSpeakOnObservableChange skipping speak due to not available command "+arguments[0])}}catch(e){o.error("Ada::triggerSpeakOnObservableChange "+e)}}.bind(this,arguments[0]),10)}.bind(this,D[E].id))):o.error("Ada::doPrepareAda - error subscribing to inputField with command-id: "+D[E].id+"!\nUse an observable to support ada for the value!");L=L.concat(Object.keys(A).map((e=>{let a=A[e].key;return a?n+a:""})).filter((e=>!!e))),this.vm.initTextAndData(L,[]).then(function(s){let p=s.textKeys;if(T&&r!==T)return o.log(o.LOG_DETAIL,"* Ada::doPrepareAdaCallback viewkey changed in the meantime... skip processing"),void(i&&i());for(o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"* Ada::doPrepareAdaCallback("+r+")"),E=D.length-1;E>=0;E--){let e=t.buildGuiKey(r,"InputField",D[E].id,"ADA");D[E].adaText||(o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"* Ada::doPrepareAdaCallback setting "+e+" to:"+p[e]),p[e]?D[E].adaText=p[e]:D[E].adaText="")}if(L.map((e=>{let t=Object.keys(A).filter((a=>A[a].key&&n+A[a].key===e))[0];if(o.LOG_DETAIL&&o.log(o.LOG_DETAIL,`* Ada::doPrepareAdaCallback processing key :${t}`),p[e]||"switchInstanceText"===t)switch(t){case"autoRepeatTimer":this._adaTextMap.autoRepeatTimer=parseInt(p[e]),isNaN(this._adaTextMap.autoRepeatTimer)&&(this._adaTextMap.autoRepeatTimer=0);break;case"timeoutExtension":this._adaTextMap.timeoutExtension=p[e];break;case"timeoutExtensionPopup":this._adaTextMap.timeoutExtensionPopup=p[e];break;case"delayedContent":this._adaTextMap.delayedContent=this.vm.getLabel(e,"");try{let e=JSON.parse(this._adaTextMap.delayedContent());e.delay&&(this._adaTextMap.delayedContentTimer=e.delay),e.text&&(this._adaTextMap.delayedContentText=a.pureComputed((()=>{let e="";try{e=JSON.parse(this._adaTextMap.delayedContent())}catch(e){}return e.text||""})))}catch(a){o.error(`Ada::doPrepareAdaCallback Error parsing ${e} - ${a.message}`)}break;case"switchInstanceText":p[_]?this._adaTextMap.switchInstanceText(p[_]):(this._adaTextMap.switchInstanceText(""),this._adaTextMap.switchInstanceTextResolved(""));break;default:t&&(this._adaTextMap[t]=this.vm.getLabel(e,""))}})),o.LOG_DETAIL&&o.log(o.LOG_DETAIL,`* Ada::doPrepareAdaCallback adaConfig:\n${JSON.stringify(this._adaTextMap,null," ")}`),!this._adaModeConventional){let e,a;for(o.LOG_DETAIL&&o.log(o.LOG_DETAIL,". Ada::doPrepareAdaCallback now preparing ada texts - mode: 456"),this._adaFocusableElements=new c,E=O.length-1;E>=0;E--)if(e=I[O[E]],"selectionKey"===e.adaType)if(a=e.adaKey,a||0===a){let t=new h;t.type=e.element.nodeName,t.command=e,a in this._adaFocusableElements?o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"Ada::doPrepareAdaCallback Error! Multiple tabIndex "+a+" for viewKey "+r):this._adaFocusableElements.add(a,t)?o.LOG_DETAIL&&o.log(o.LOG_DETAIL,". Ada::doPrepareAdaCallback mode: 456 - added object with key <"+a+"> for command: "+O[E]):o.error("Ada:: Error adding element '"+e.element.id+"' with baseURI '"+e.element.baseURI+"' to focusable elements!")}else o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"Ada:: Error! No tabIndex defined for ada-Enabled element "+e.element.id);this._adaFocusableElements.init(),o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"Ada::doPrepareAdaCallback initialized AdaElements:\n"+this._adaFocusableElements.toString())}if(T&&r!==T)return o.log(o.LOG_DETAIL,"* Ada::doPrepareAdaCallback after onAdaPrepared - viewkey changed in the meantime... skip processing"),void(i&&i());d.dispatch("onAdaPrepared",[]),i&&i(),e&&l.state===l.STATE_VALUES.SPEAK&&(this._adaTextMap.delayedContentTimer>0&&"(#all#)"===this._adaTextMap.delayedContentText()?-1===this._adaTextMap.delayedContentTimerActive&&(this._adaTextMap.delayedContentTimerActive=window.setTimeout(this.speakAda.bind(this,T),this._adaTextMap.delayedContentTimer)):(this.speakAda(T),this._adaTextMap.delayedContentTimer>0&&-1===this._adaTextMap.delayedContentTimerActive&&(this._adaTextMap.delayedContentTimerActive=window.setTimeout(function(){o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"> Ada::delayedSpeakAda1()"),T&&r!==T?o.log(o.LOG_DETAIL,"* Ada::delayedSpeakAda2 viewkey changed in the meantime... skip processing"):(this.mixAda(),l.speak(this._adaTextMap.delayedContentTextResolved(),1,10,null),o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"< Ada::delayedSpeakAda1"))}.bind(this),this._adaTextMap.delayedContentTimer))))}.bind(this))}else o.LOG_DETAIL&&o.log(o.LOG_DETAIL,". ada already prepared"),d.dispatch("onAdaPrepared",[]),i&&i(),e&&l.state===l.STATE_VALUES.SPEAK&&(this._adaTextMap.delayedContentTimer>0&&"(#all#)"===this._adaTextMap.delayedContentText()?-1===this._adaTextMap.delayedContentTimerActive&&(this._adaTextMap.delayedContentTimerActive=window.setTimeout(this.speakAda.bind(this),this._adaTextMap.delayedContentTimer)):(this.speakAda(),-1===this._adaTextMap.delayedContentTimerActive&&(this._adaTextMap.delayedContentTimerActive=window.setTimeout(function(){o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"> Ada::delayedSpeakAda2()"),this.mixAda(),l.speak(this._adaTextMap.delayedContentTextResolved(),1,10,null),o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"< Ada::delayedSpeakAda2")}.bind(this),this._adaTextMap.delayedContentTimer))));o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"< Ada::doPrepareAda")}.bind(this);o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"> Ada::prepareAda("+r+") - keyPrefix: "+n);const x="GUI_ADA_TEXT_SWITCH_INSTANCE";Wincor.UI.Service.Provider.DataService.getValues([x],function(a){_=a[x]?a[x]:"",o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"* Ada::prepareAda::switchInstanceCallback textKey is: '"+_+"'"),A.switchInstanceText.key=_||"",E.bind(this)(e,i,n)}.bind(this),null),o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"< Ada::prepareAda")},this.isValidCommandForAda=function(a){o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"> Ada::isValidCommandForAda("+a.id+")");let t=!1,i=!1;if(a.adaType!==this.ADA_TYPE.SELECTION_KEY&&a.adaType!==this.ADA_TYPE.STANDARD_KEY&&a.adaType!==this.ADA_TYPE.CHECKBOX||isNaN(a.adaKey)&&(o.LOG_DETAIL&&o.log(o.LOG_DETAIL,". Ada::isValidCommandForAda command has invalid adaKey '"+a.adaKey+"' ... ignore for speaking"),i=!0),!i){let i=e("#"+a.element.id)[0];i?i.__commandId_PCEFlexUI?i.__commandId_PCEFlexUI===a.id&&(t=!0):o.error("Ada::isValidCommandForAda could not locate attribute '__commandId_PCEFlexUI' in element "+a.element.id):o.LOG_DETAIL&&o.log(o.LOG_DETAIL,". Ada::isValidCommandForAda could not locate element for cmd "+a.id)}return o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"< Ada::isValidCommandForAda returns "+t),t},this.prepareAdaType=function(e,t){let i={},d={};const n={};n[this.ADA_TYPE.STANDARD_KEY]=this._adaTextMap.macroActiveKey(),n[this.ADA_TYPE.FUNCTION_KEY]=this._adaTextMap.macroActiveKey(),n[this.ADA_TYPE.SELECTION_KEY]=this._adaTextMap.macroActiveKey(),n[this.ADA_TYPE.DYNAMIC_VALUE]=this._adaTextMap.macroActiveDynamicText(),n[this.ADA_TYPE.INPUTFIELD]=this._adaTextMap.macroActiveInput(),n[this.ADA_TYPE.CHECKBOX]=this._adaTextMap.macroCheckboxChecked();let l=n[e],T="";o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"> Ada::mixAda:prepareAdaType preparing "+e);let A,c,h=s.getByAdaType(e);if(o.LOG_DETAIL&&o.log(o.LOG_DETAIL,". Ada::mixAda:prepareAdaType found commands: "+h.length),h.length>0){let n;for(n=0;n<h.length;n++)if(A={},c={},o.LOG_DETAIL&&o.log(o.LOG_DETAIL,". Ada::mixAda checking command "+h[n].id),s.isActive(h[n].id||h[n].ignoreState)){if(!h[n].suspended&&this.isValidCommandForAda(h[n]))if(o.LOG_DETAIL&&o.log(o.LOG_DETAIL,". Ada::mixAda valid command "+h[n].id),e===this.ADA_TYPE.FUNCTION_KEY||e===this.ADA_TYPE.SELECTION_KEY||e===this.ADA_TYPE.STANDARD_KEY)A.adaText=s.getCmdAdaText(h[n].id),""!==h[n].adaKey||e===this.ADA_TYPE.FUNCTION_KEY?(""===h[n].adaKey&&e===this.ADA_TYPE.FUNCTION_KEY?A.adaKey=A.adaText:A.adaKey=h[n].adaKey,A.adaTextPost=s.getCmdAdaText(h[n].id,!0),A.adaKey in i&&o.LOG_DETAIL&&o.log(o.LOG_DETAIL,". Ada::prepareAdaType ATTENTION, adaKey <"+A.adaKey+"> already used!"),i[A.adaKey]=this.resolveAdaKeywords(l,A),h[n].adaMacroResolved(i[A.adaKey])):o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"command '"+h[n].id+"' of "+r+" has no configured adakey!");else if(e===this.ADA_TYPE.INPUTFIELD||e===this.ADA_TYPE.DYNAMIC_VALUE)s.getCmdLabel(h[n].id)||e===this.ADA_TYPE.DYNAMIC_VALUE?(o.LOG_DETAIL&&o.log(o.LOG_DETAIL,". Ada::mixAda adding command "+h[n].id),A.adaText=s.getCmdAdaText(h[n].id),A.value=s.getCmdLabel(h[n].id),i[h[n].id]=this.resolveAdaKeywords(l,A),h[n].adaMacroResolved(i[h[n].id])):o.LOG_DETAIL&&o.log(o.LOG_DETAIL,". Ada::mixAda value is false -> skipping command "+h[n].id);else if(e===this.ADA_TYPE.CHECKBOX)if(h[n].adaKey){if(!t||"checked"===t&&s.isPressed(h[n].id))t||(l=this._adaTextMap.macroCheckbox()),A.adaKey=h[n].adaKey,A.adaText=s.getCmdAdaText(h[n].id),A.adaTextPost=s.getCmdAdaText(h[n].id,!0),(A.adaKey in i||A.adaKey in d)&&o.LOG_DETAIL&&o.log(o.LOG_DETAIL,". Ada::prepareAdaType ATTENTION, adaKey <"+A.adaKey+"> already used!"),i[A.adaKey]=this.resolveAdaKeywords(l,A),h[n].adaMacroResolved(i[A.adaKey]);else if("unchecked"===t&&!s.isPressed(h[n].id)){let e=this._adaTextMap.macroCheckboxUnchecked();c.adaKey=h[n].adaKey,c.adaText=s.getCmdAdaText(h[n].id),c.adaTextPost=s.getCmdAdaText(h[n].id,!0),(c.adaKey in i||c.adaKey in d)&&o.LOG_DETAIL&&o.log(o.LOG_DETAIL,". Ada::prepareAdaType ATTENTION, adaKey <"+c.adaKey+"> already used!"),d[c.adaKey]=this.resolveAdaKeywords(e,c),h[n].adaMacroResolved(d[c.adaKey])}}else o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"command '"+h[n].id+"' of "+r+" has no configured adakey!");else o.error("Ada::prepareAdaType -> unknown adaType: "+e)}else o.LOG_DETAIL&&o.log(o.LOG_DETAIL,". Ada::prepareAdaType command not active! "+h[n].id);let p,_=Object.keys(d).length>0?d:i,E=Object.keys(_);for(n=0;n<E.length;n++)T+=_[E[n]]+" ";this.activeItems[e+"Count"](Object.keys(i).length);let x=0;try{p=a.unwrap(this._adaTextMap.keysText),p.indexOf("(#selectionKeys#)")>-1&&(x+=this.activeItems.selectionKeyCount()),p.indexOf("(#functionKeys#)")>-1&&(x+=this.activeItems.functionKeyCount()),p.indexOf("(#standardKeys#)")>-1&&(x+=this.activeItems.standardKeyCount()),p.indexOf("(#checkboxes#)")>-1&&(x+=this.activeItems.checkboxCount())}catch(e){}this.activeItems.activeKeyCount(x)}return o.LOG_DETAIL&&o.log(o.LOG_DETAIL,". Ada::mixAda:prepareAdaType returns "+T),T},this.enhanceStdTextsWithCmds=function(){let t={instruction:"",headline:"",message:""},i="";const d=this,n={[d.ADA_TYPE.HEADLINE]:"#headline",[d.ADA_TYPE.INSTRUCTION]:"#instruction",[d.ADA_TYPE.MESSAGE]:"#messageArea"};return o.LOG_DETAIL&&o.log(o.LOG_DETAIL,`> Ada::enhanceStdTextsWithCmds() for ${r}`),Object.keys(n).forEach((d=>{let l=s.getByAdaType(d);if(l.length>0?(i=l.map((e=>{let t=a.unwrap(e.adaText)||"";return o.LOG_DETAIL&&o.log(o.LOG_DETAIL,`. Ada::enhanceStdTextsWithCmds getting adaText from cmd '${e.id}' -> '${t}'`),t})).join(" "),i||o.LOG_DETAIL&&o.log(o.LOG_DETAIL,`. Ada::enhanceStdTextsWithCmds no text available for '${d}'`)):(o.LOG_DETAIL&&o.log(o.LOG_DETAIL,`. Ada::enhanceStdTextsWithCmds no cmds for '${d}'`),this._doAdaTextFallbacks&&(i=e(n[d]).text(),o.LOG_DETAIL&&o.log(o.LOG_DETAIL,`. Ada::enhanceStdTextsWithCmds trying adaTextFallback '${n[d]}': '${i}`))),i){let e=" ",a=this._adaTextMap[d].call();o.LOG_DETAIL&&o.log(o.LOG_DETAIL,`. Ada::enhanceStdTextsWithCmds original _adaTextMap entry for '${d}': '${a}`),""===a&&(e=""),t[d]=i,this._adaTextMap[d].call(null,`${a}${e}${i}`),o.LOG_DETAIL&&o.log(o.LOG_DETAIL,`. Ada::enhanceStdTextsWithCmds complete '${d}' with cmds: ${this._adaTextMap[d].call()}`)}})),o.LOG_DETAIL&&o.log(o.LOG_DETAIL,`< Ada::enhanceStdTextsWithCmds returns ${JSON.stringify(t)}`),t},this.mixAda=function(){let e="",a="",t="",i="",d="",n="",T="",A="";o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"> Ada::mixAda() for "+r),this._adaModeConventional||o.LOG_DETAIL&&o.log(o.LOG_DETAIL,". Ada::mixAda() 456 - elements:"+this._adaFocusableElements.toString());try{let{instruction:r,headline:c,message:h}=this.enhanceStdTextsWithCmds(),p={headline:c,instruction:r,message:h};if(!this._adaModeConventional)try{p.adaText=s.getCmdAdaText(this._adaFocusableElements.currentCommand().id),p.adaTextPost=s.getCmdAdaText(this._adaFocusableElements.currentCommand().id,!0)}catch(e){o.error("Ada mixAda could not locate current command!"+e.message+"\ncurrent elements:\n"+this._adaFocusableElements.toString())}this._adaTextMap.headline(this.resolveAdaKeywords(this._adaTextMap.headline(),p)),this._adaTextMap.instruction(this.resolveAdaKeywords(this._adaTextMap.instruction(),p)),this._adaTextMap.messageResolved(this.resolveAdaKeywords(this._adaTextMap.message(),p)),this._adaTextMap.keysTextResolved(this.resolveAdaKeywords(this._adaTextMap.keysText(),p)),this._adaFocusableElements.length>0?this._adaTextMap.macro456Resolved(this.resolveAdaKeywords(this._adaTextMap.macro456(),p)):this._adaTextMap.macro456Resolved(""),this._adaTextMap.echoPIN(this.resolveAdaKeywords(this._adaTextMap.echoPIN(),p)),e=this.prepareAdaType(this.ADA_TYPE.STANDARD_KEY),a=this.prepareAdaType(this.ADA_TYPE.SELECTION_KEY),t=this.prepareAdaType(this.ADA_TYPE.FUNCTION_KEY),i=this.prepareAdaType(this.ADA_TYPE.INPUTFIELD),d=this.prepareAdaType(this.ADA_TYPE.DYNAMIC_VALUE),n=this.prepareAdaType(this.ADA_TYPE.CHECKBOX,"checked"),T=this.prepareAdaType(this.ADA_TYPE.CHECKBOX,"unchecked"),A=this.prepareAdaType(this.ADA_TYPE.CHECKBOX),o.LOG_DETAIL&&o.log(o.LOG_DETAIL,". Ada::mixAda replacing (#standardKeys#) with "+e),this._adaTextMap.standardKeysTextResolved(e),this._adaTextMap.keysTextResolved(this._adaTextMap.keysText().replace("(#standardKeys#)",e)),this._adaTextMap.messageResolved(this._adaTextMap.messageResolved().replace("(#standardKeys#)",e)),o.LOG_DETAIL&&o.log(o.LOG_DETAIL,". Ada::mixAda replacing (#selectionKeys#) with "+a),this._adaTextMap.selectionKeysTextResolved(a),this._adaTextMap.keysTextResolved(this._adaTextMap.keysTextResolved().replace("(#selectionKeys#)",a)),this._adaTextMap.messageResolved(this._adaTextMap.messageResolved().replace("(#selectionKeys#)",a)),o.LOG_DETAIL&&o.log(o.LOG_DETAIL,". Ada::mixAda replacing (#functionKeys#) with "+t),this._adaTextMap.keysTextResolved(this._adaTextMap.keysTextResolved().replace("(#functionKeys#)",t)),this._adaTextMap.functionKeysTextResolved(t),o.LOG_DETAIL&&o.log(o.LOG_DETAIL,". Ada::mixAda this._adaTextMap.keysTextResolved: "+this._adaTextMap.keysTextResolved()),this._adaTextMap.messageResolved(this._adaTextMap.messageResolved().replace("(#functionKeys#)",t)),o.LOG_DETAIL&&o.log(o.LOG_DETAIL,". Ada::mixAda replacing (#inputFields#) with "+i),this._adaTextMap.inputTextResolved(this._adaTextMap.inputText().replace("(#inputFields#)",i)),this._adaTextMap.messageResolved(this._adaTextMap.messageResolved().replace("(#inputFields#)",i)),o.LOG_DETAIL&&o.log(o.LOG_DETAIL,". Ada::mixAda replacing (#dynamicValues#) with "+d),this._adaTextMap.dynamicTextResolved(this._adaTextMap.dynamicText().replace("(#dynamicValues#)",d)),this._adaTextMap.messageResolved(this._adaTextMap.messageResolved().replace("(#dynamicValues#)",d)),o.LOG_DETAIL&&o.log(o.LOG_DETAIL,". Ada::mixAda replacing (#checkboxesChecked#) with "+n),this._adaTextMap.checkboxCheckedTextResolved(this._adaTextMap.checkboxCheckedText().replace("(#checkboxesChecked#)",n)),this._adaTextMap.messageResolved(this._adaTextMap.messageResolved().replace("(#checkboxesChecked#)",n)),o.LOG_DETAIL&&o.log(o.LOG_DETAIL,". Ada::mixAda replacing (#checkboxesUnchecked#) with "+T),this._adaTextMap.checkboxUncheckedTextResolved(this._adaTextMap.checkboxUncheckedText().replace("(#checkboxesUnchecked#)",T)),this._adaTextMap.messageResolved(this._adaTextMap.messageResolved().replace("(#checkboxesUnchecked#)",T)),o.LOG_DETAIL&&o.log(o.LOG_DETAIL,". Ada::mixAda replacing (#checkboxes#) with "+A),this._adaTextMap.checkboxTextResolved(this._adaTextMap.checkboxText().replace("(#checkboxes#)",A)),this._adaTextMap.messageResolved(this._adaTextMap.messageResolved().replace("(#checkboxes#)",A)),this._adaTextMap.keysTextResolved(this._adaTextMap.keysTextResolved().replace("(#checkboxes#)",A)),this._adaTextMap.macroRepeatKeyResolved(this.resolveAdaKeywords(this._adaTextMap.macroRepeatKey(),{repeatKey:this._repeatKey})),p={headline:this._adaTextMap.headline(),instruction:this._adaTextMap.instruction(),message:this._adaTextMap.messageResolved(),keys:this._adaTextMap.keysTextResolved(),inputFields:this._adaTextMap.inputTextResolved(),dynamicValues:this._adaTextMap.dynamicTextResolved(),macro456:this._adaTextMap.macro456Resolved(),repeatKey:this._adaTextMap.macroRepeatKeyResolved(),standardKeys:e,selectionKeys:a,functionKeys:t,checkboxesChecked:this._adaTextMap.checkboxCheckedTextResolved(),checkboxesUnchecked:this._adaTextMap.checkboxUncheckedTextResolved(),checkboxes:A},this._adaTextMap.switchInstanceTextResolved(this.resolveAdaKeywords(this._adaTextMap.switchInstanceText(),p)),p.marketing=this._adaTextMap.switchInstanceTextResolved(),this._adaTextMap.repeatOnHelpResolved(this.resolveAdaKeywords(this._adaTextMap.repeatOnHelp(),p)),this._adaTextMap.delayedContentTextResolved(this.resolveAdaKeywords(this._adaTextMap.delayedContentText(),p)),this._adaTextMap.repeatOnContentChangeResolved(this.resolveAdaKeywords(this._adaTextMap.repeatOnContentChange(),p)),this._adaTextMap.repeatOnHelpFixedResolved(this.resolveAdaKeywords(this._adaTextMap.repeatOnHelpFixed(),p)),this._adaTextMap.initialTextResolved(this.resolveAdaKeywords(this._adaTextMap.initialText(),p)),this._adaTextMap.checkboxCheckedTextResolved(this.resolveAdaKeywords(this._adaTextMap.checkboxCheckedTextResolved(),p)),this._adaTextMap.checkboxUncheckedTextResolved(this.resolveAdaKeywords(this._adaTextMap.checkboxUncheckedTextResolved(),p)),this._adaTextMap.checkboxTextResolved(this.resolveAdaKeywords(this._adaTextMap.checkboxText(),p)),""!==this._adaTextMap.repeatOnHelpFixedResolved()&&l.setRepeatText(this._adaTextMap.repeatOnHelpFixedResolved(),null)}catch(e){o.error("Ada::mixAda: "+e.message)}o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"< Ada::mixAda:\n"+JSON.stringify(this._adaTextMap,((e,a)=>"function"==typeof a?a():a)," "))},this.postponeViewTimeoutUntilSpeakingStopped=function(){o.LOG_DETAIL&&o.log(o.LOG_DETAIL,`> Ada::postponeViewTimeoutUntilSpeakingStopped() for ${r}`),T.clearTimeout(),l.registerForServiceEvent(l.SERVICE_EVENTS.SPEAKING_STOPPED,(()=>{const e=this.vm.vmHelper;if(e.isTimeoutPopupActive()){const a=e.getTimerInfo();o.LOG_DETAIL&&o.log(o.LOG_DETAIL,`* Ada::postponeViewTimeoutUntilSpeakingStopped received SPEAKING_STOPPED - refreshing timeout for popup with name=${a.name}: ${a.timeLen}`),e.refreshTimer(a.timeLen,a.name)}else o.LOG_DETAIL&&o.log(o.LOG_DETAIL,`* Ada::postponeViewTimeoutUntilSpeakingStopped received SPEAKING_STOPPED - refreshing timeout for ${r}`),T.refreshTimeout()}),l.DISPOSAL_TRIGGER_ONETIME),o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"< Ada::postponeViewTimeoutUntilSpeakingStopped")},this.speakAda=function(e){if(o.LOG_DETAIL&&o.log(o.LOG_DETAIL,`> Ada::speakAda() for ${e} - current ${r}`),e&&r!==e)return void(o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"< Ada::speakAda viewkey changed in the meantime... skip processing"));if(this.deactivatedForAda)return o.LOG_DETAIL&&o.log(o.LOG_DETAIL,". Ada::speakAda already deactivated... skipping"),void(o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"< Ada::speakAda"));let a=parseInt(this._adaTextMap.timeoutExtension);isNaN(a)||this._timeoutExtensionDone||(this._timeoutExtensionDone=!0,T.refreshTimeout(T.getTimeoutValue()*(a/100)));let t=parseInt(this._adaTextMap.timeoutExtensionPopup);const i=this.vm.vmHelper;if(i.isTimeoutPopupActive()&&!isNaN(t)){const e=i.getTimerInfo(),a=e.timeLen*(t/100);this.vm.timeoutValue&&-1!==this.vm.timeoutValue&&(this.vm.timeoutValue=a),i.refreshTimer(a,e.name),o.LOG_DETAIL&&o.log(o.LOG_DETAIL,`* Ada::speakAda refreshing timeout for popup with name=${e.name}: ${a}`)}this.postponeViewTimeoutUntilSpeakingStopped(),this.mixAda(),""===this._adaTextMap.initialTextResolved()&&this._adaTextMap.initialTextResolved(" "),o.LOG_DETAIL&&o.log(o.LOG_DETAIL,`* Ada::speakAda speaking initialText: ${this._adaTextMap.initialTextResolved()}`),l.speak(this._adaTextMap.initialTextResolved(),1,10,(e=>{-1===e?(o.LOG_ANALYSE&&o.log(o.LOG_ANALYSE,"* Ada::speakAda speaking initialText fails, RC: -1. Ending view with UIRESULT_ERROR_VIEW, ERROR_VIEW_ADA"),T.endView(T.UIRESULT_ERROR_VIEW,"ERROR_VIEW_ADA")):(o.LOG_DETAIL&&o.log(o.LOG_DETAIL,`* Ada::speakAda speaking repeatOnHelpText ${this._adaTextMap.repeatOnHelpResolved()}`),setTimeout((()=>{l.speak(this._adaTextMap.repeatOnHelpResolved(),0,10,(e=>{-1===e?(o.LOG_ANALYSE&&o.log(o.LOG_ANALYSE,"* Ada::speakAda speaking repeatOnHelpText fails, RC: -1. Ending view with UIRESULT_ERROR_VIEW, ERROR_VIEW_ADA"),T.endView(T.UIRESULT_ERROR_VIEW,"ERROR_VIEW_ADA")):setTimeout((()=>{!this._adaTextMap.autoRepeatTimerActive&&this._adaTextMap.autoRepeatTimer>0&&(this._adaTextMap.autoRepeatTimerActive=1,l.autoRepeat(this._adaTextMap.autoRepeatTimer,(e=>{o.LOG_DETAIL&&o.log(o.LOG_DETAIL,`* Ada::speakAda AdaService::autoRepeat callback returns ${e.RC}`)})))}),1)}))}),1))})),o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"< Ada::speakAda")},this.handleAdaError=function(){if(o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"> Ada::handleAdaError()"),d.viewActivated){const e=Wincor.UI.Service.Provider;l.errorHappened=!1,e.ViewService.endView(e.ViewService.UIRESULT_ERROR_VIEW,"ADA")}o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"< Ada::handleAdaError")},this.handleAdaStateChange=function(e){o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"> Ada::handleAdaStateChange("+e+")");const a=l.STATE_VALUES;switch(e){case a.BEREADY:this._adaEnabled=!0,d.viewPrepared&&!this.deactivatedForAda&&this.prepareAda(!1),this._adaTextMap.autoRepeatTimerActive&&this._adaTextMap.autoRepeatTimer>0&&(this._adaTextMap.autoRepeatTimerActive=0,o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"* Ada::handleAdaStateChange clearing autorepeat "),l.autoRepeat(0,null)),-1!==this._adaTextMap.delayedContentTimerActive&&(window.clearTimeout(this._adaTextMap.delayedContentTimerActive),o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"* Ada::handleAdaStateChange clearing delayedContentTimerActive "),this._adaTextMap.delayedContentTimerActive=-1);break;case a.DONOTHING:this._adaEnabled=!1;break;case a.SPEAK:this._adaEnabled=!0,d.viewPrepared&&!this.deactivatedForAda&&this.prepareAda(!0)}o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"< Ada::handleAdaStateChange")},this.onButtonPressedAdaHandling=async function(e){let a=e.id,t=!1,d=this._adaTextMap.macroEchoKey(),n=s.get(a);if(o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"* Ada.onButtonPressedAdaHandling(args: "+e+", cmdId: "+a+")"),n.adaType&&n.adaType in{selectionKey:1,functionKey:1,standardKey:1}?t=!0:n.adaType===this.ADA_TYPE.CHECKBOX&&(t=!0,d=this._adaTextMap.macroEchoCheckbox()),!i.designMode&&!n.triggeredByEpp&&"GUIAPP"===Wincor.UI.Service.Provider.getInstanceName())try{await l.switchToApp()}catch(e){}if(t){let t=2,i=void 0!==n.adaKey?n.adaKey:"not configured ",T=s.getCmdAdaText(a),r=s.getCmdAdaText(a,!0);if(!((-1===d.indexOf("adaKey")||i&&i.trim())&&(-1===d.indexOf("adaText")||T&&T.trim())))return o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"* Ada.onButtonPressedAdaHandling - skip speaking due to missing text"),void l.speak(" ",t,10,null);-1!==d.indexOf("adaTextPost")&&(r&&r.trim()||(r=T)),this.mixAda(),d=this.resolveAdaKeywords(d,{adaKey:i,adaText:T,adaTextPost:r,keys:this._adaTextMap.keysTextResolved(),standardKeys:this._adaTextMap.standardKeysTextResolved(),selectionKeys:this._adaTextMap.selectionKeysTextResolved(),functionKeys:this._adaTextMap.functionKeysTextResolved(),dynamicValues:this._adaTextMap.dynamicTextResolved(),inputFields:this._adaTextMap.inputTextResolved(),checkboxesChecked:this._adaTextMap.checkboxCheckedTextResolved(),checkboxesUnchecked:this._adaTextMap.checkboxUncheckedTextResolved()}),"CORRECT"===e&&(t=1),""!==d&&l.speak(d,t,10,null)}},this.isAdaNavigationKey=function(e){const a=this.serviceProvider.EppService;return this._adaEnabled&&!this._adaModeConventional&&(e===a.BUTTONEPP_4||e===a.BUTTONEPP_5||e===a.BUTTONEPP_6)},this.handle456Input=function(e){o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"> Ada::handle456Input("+e+")"),T.refreshTimeout();const a=Wincor.UI.Service.Provider.EppService;let t=!1;switch(e){case a.BUTTONEPP_4:this._adaFocusableElements.previous(),t=!0;break;case a.BUTTONEPP_5:let i=this._adaFocusableElements.currentCommand();d.viewModelHelper.triggerEvent("uicommandautomation",{object:i.element.id,eppKey:e,viewModel:{cmdRepos:s}});break;case a.BUTTONEPP_6:this._adaFocusableElements.next(),t=!0}t&&(this.mixAda(),l.speak(this._adaTextMap.macro456Resolved(),2,10,null)),o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"< Ada::handle456Input")},this.initInstanceVariables=function(e){if(this._adaFocusableElements=new c,e){let e={keysText:this._adaTextMap.keysText,inputText:this._adaTextMap.inputText,dynamicText:this._adaTextMap.dynamicText,echoPIN:this._adaTextMap.echoPIN,macroActiveKey:this._adaTextMap.macroActiveKey,macroInactiveKey:this._adaTextMap.macroInactiveKey,macroActiveInput:this._adaTextMap.macroActiveInput,macroActiveDynamicText:this._adaTextMap.macroActiveDynamicText,macroCheckboxChecked:this._adaTextMap.macroCheckboxChecked,macroCheckboxUnchecked:this._adaTextMap.macroCheckboxUnchecked,macroEchoCheckbox:this._adaTextMap.macroEchoCheckbox,checkboxText:this._adaTextMap.checkboxText,checkboxCheckedText:this._adaTextMap.checkboxCheckedText,checkboxUncheckedText:this._adaTextMap.checkboxUncheckedText,macroRepeatKey:this._adaTextMap.macroRepeatKey,macroEchoKey:this._adaTextMap.macroEchoKey,macroEchoInput:this._adaTextMap.macroEchoInput,macro456:this._adaTextMap.macro456,repeatOnHelp:this._adaTextMap.repeatOnHelp,repeatOnHelpFixed:this._adaTextMap.repeatOnHelpFixed,repeatOnContentChange:this._adaTextMap.repeatOnContentChange,repeatOnButtonAvailability:this._adaTextMap.repeatOnButtonAvailability,switchInstanceText:this._adaTextMap.switchInstanceText};this._adaTextMap=Object.assign({},Object.keys(A).reduce(((e,t)=>(e[t]=A[t].plain?A[t].default:a.observable(A[t].default),e)),Object.create(null)),e)}else this._timeoutExtensionDone=!1,this._adaTextMap=Object.keys(A).reduce(((e,t)=>(e[t]=A[t].plain?A[t].default:a.observable(A[t].default),e)),Object.create(null))},this.reset=function(e){Object.keys(this.ADA_TYPE).forEach((e=>{this.activeItems[this.ADA_TYPE[e]+"Count"](0)})),this.activeItems.activeKeyCount(0),i.designMode||(l.setRepeatText("",null),l.autoRepeat(0,null)),this.initInstanceVariables(e)},this.baseInitialize=async function(){o.LOG_DETAIL&&o.log(o.LOG_DETAIL,`> Ada::baseInitialize() for ${r}`);const e=Wincor.UI.Service.Provider,a=e.ViewService;if(this._adaEnabled=!1,!i.designMode&&!i.toolingMode){if(this._adaEnabled="*"!==r&&l.state!==l.STATE_VALUES.DONOTHING&&a.viewContext.viewConfig.timeout!==a.immediateTimeout,i.designModeExtended){let a=await e.DataService.getValues("PROP_ADA_STATUS_VALUE");this._adaEnabled="OFF"!==a.PROP_ADA_STATUS_VALUE&&"true"===localStorage.getItem("adaStarted")}"*"!==r&&o.LOG_DETAIL&&o.log(o.LOG_DETAIL,`. Ada::baseInitialize _adaEnabled=${this._adaEnabled} adaState=${l.state}\n                        timeout=${a.viewContext.viewConfig.timeout} immediate=${a.immediateTimeout}`)}if(this._adaEnabled){let a=t.buildGuiKey(r,"ADA","Mode"),i=await e.LocalizeService.getText([a]);o.LOG_DETAIL&&o.log(o.LOG_DETAIL,`> Ada::baseInitialize::adaModeCallback(${JSON.stringify(i)})`),this._adaModeConventional=!(i&&"456"===i[a])}o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"< Ada::baseInitialize")},this.initialize=function(){const e=this;return this.vm=new Wincor.UI.Content.BaseViewModel,this.vm.setViewKey(r),n.Promises.promise((async function(a,t){o.LOG_DETAIL&&o.log(o.LOG_DETAIL,`> Ada::initialize() for ${r}`);const i=Wincor.UI.Service.Provider,d=i.ViewService;if(e._adaEnabled=!1,await e.baseInitialize(),e._adaEnabled){e.initInstanceVariables();let t=e.onButtonPressedAdaHandling.bind(e);d.registerForServiceEvent(d.SERVICE_EVENTS.CONTENT_UPDATE,(function(){o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"* ada received CONTENT_UPDATE - adding delegates for onButtonPressedAdaHandling");let a=Object.keys(s.commands).filter((a=>[e.ADA_TYPE.FUNCTION_KEY,e.ADA_TYPE.SELECTION_KEY,e.ADA_TYPE.STANDARD_KEY,e.ADA_TYPE.CHECKBOX].includes(s.get(a).adaType)));s.registerForAction({id:a,listener:t,context:e});let i=Object.keys(s.commands).filter((a=>s.get(a).adaType===e.ADA_TYPE.CHECKBOX));s.registerForStateChange({context:e,id:i,listener:a=>{0!==a.viewState&&1!==a.viewState||e.onButtonPressedAdaHandling(a)}})})),d.registerForServiceEvent(d.SERVICE_EVENTS.VIEW_ACTIVATED,(function(){if(e.deactivatedForAda=!1,l.errorHappened)o.error("ada.onViewActivatedInternal ada error happened"),l.errorHappened=!1,d.endView(d.UIRESULT_ERROR_VIEW,"ADA");else{let a=Object.keys(s.commands).filter((a=>[e.ADA_TYPE.FUNCTION_KEY,e.ADA_TYPE.SELECTION_KEY,e.ADA_TYPE.STANDARD_KEY,e.ADA_TYPE.CHECKBOX].includes(s.get(a).adaType)));s.registerForAction({id:a,listener:t,context:e});let i=Object.keys(s.commands).filter((a=>s.get(a).adaType===e.ADA_TYPE.CHECKBOX));if(s.registerForStateChange({context:e,id:i,listener:a=>{0!==a.viewState&&1!==a.viewState||e.onButtonPressedAdaHandling(a)}}),o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"* ada received VIEW_ACTIVATED - ada state is: "+l.state),l.state!==l.STATE_VALUES.BEREADY&&l.state!==l.STATE_VALUES.SPEAK||(o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"* ada received VIEW_ACTIVATED - now preparing ada"),e.prepareAda(void 0,void 0,void 0,r)),l.state===l.STATE_VALUES.SPEAK)return o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"* ada received VIEW_ACTIVATED - avoid viewservice starting interaction timer"),!0}}),d.DISPOSAL_TRIGGER_UNLOAD),d.registerForServiceEvent(d.SERVICE_EVENTS.VIEW_CLOSING,(function(){e._adaTextMap.autoRepeatTimerActive&&(l.autoRepeat(0,null),e._adaTextMap.autoRepeatTimerActive=!1),e._claimId456>=0&&(i.EppService.releaseKeys(e._claimId456),e._claimId456=-1);let a=Object.keys(e._adaInputFieldSubscriptions);for(let t=0;t<a.length;t++){let i=a[t];e._adaInputFieldSubscriptions[i].dispose()}e._adaInputFieldSubscriptions={},a=Object.keys(e._adaViewStateSubscriptions);for(let t=0;t<a.length;t++){let i=a[t];e._adaViewStateSubscriptions[i].dispose()}e._adaViewStateSubscriptions={}})),l.registerForServiceEvent(l.SERVICE_EVENTS.STATE_CHANGED,e.handleAdaStateChange.bind(e)),l.registerForServiceEvent(l.SERVICE_EVENTS.ERROR_HAPPENED,e.handleAdaError.bind(e));const n=i.ConfigService;let T=await n.getConfiguration("ADA\\CCADAFW\\RTCKEYS",null);const A="REPEAT_KEY";if(T&&T[A]){const a="FUNCKEY_";e._repeatKey=T[A].includes(a)?T[A].substr(a.length):T[A],o.LOG_DETAIL&&o.log(o.LOG_DETAIL,`. Ada::initialize config from registry for repeatKey=${e._repeatKey}`)}e._adaModeConventional?a():i.EppService.claimKeys(["4","5","6"],-1,(function(t){e._claimId456=t.claimId,o.LOG_DETAIL&&o.log(o.LOG_DETAIL,`* Ada::initialize claimed keys 456 - claimId: ${e._claimId456}`),a()}),e.handle456Input.bind(e)),o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"< Ada::initialize::adaModeCallback now resolving promise...")}else a();o.LOG_DETAIL&&o.log(o.LOG_DETAIL,"< Ada::initialize")}))}},d.adaModule=i.Ada,i.Ada}));