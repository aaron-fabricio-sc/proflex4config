/**
 @preserve
 Copyright (c) 2001-2020 by Wincor Nixdorf International GmbH,
 Heinz-Nixdorf-Ring 1, 33106 Paderborn, Germany

 This software is the confidential and proprietary information
 of Diebold Nixdorf.
 You shall not disclose such Confidential Information and shall
 use it only in accordance with the terms of the license agreement
 you entered into with Diebold Nixdorf.


$MOD$ BaseViewModel.js 4.3.1-210311-21-bbdeaee3-1a04bc7d

*/
define(["jquery","knockout","vm-util/LabelContainer","ko-custom","ui-content","vm-container","code-behind/ViewHelper","vm-util/ViewModelHelper","vm-util/UICommanding","flexuimapping","vm-util/Ada","extensions"],(function(e,t,i,a,s,o,l,n,r,d,L,A){"use strict";const T=Wincor.UI.Service.Provider.LogProvider,I=Wincor.UI.Service.Provider.ViewService,u={CONFIRM:"CONFIRM",CANCEL:"CANCEL",CORRECT:"CORRECT"},c={INFO:"InfoBox",WARNING:"WarningBox",ERROR:"ErrorBox"},p="[#VIEW_KEY#]",E={dateTime:null,currencyData:null},g=t.observable(""),O=t.observable("style/default/images/");function b(e,t){T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`> BaseViewModel::updateCommandVisualStates(${e.id}, ${t})`),t=parseInt(t),isNaN(t)||e.viewState.update(t),T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`< BaseViewModel::updateCommandVisualStates updated: ${!isNaN(t)}`)}Wincor.UI.Content.BaseViewModel=class{lifeCycleMode=o.LIFE_CYCLE_MODE.DEFAULT;designTimeRunner=null;textKeys=[];dataKeys=[];viewStateKeys=[];viewStatePropertyMap=[];labels=new i;vmContainer=o;vmHelper=n;ada=L;subscriptions=[];logger=T;moreTimeTimerId=-1;serviceProvider=Wincor.UI.Service.Provider;observableArea=null;observableAreaId="";designMode=s.designMode;designModeExtended=s.designModeExtended;currentView="";viewKey="*";viewKeyObservable=t.observable("*");viewActivated=t.observable(!1);contentStyle=g;imageRoot=O;viewHelper=l;cmdRepos=r;bankingContext=E;viewConfig={};staticActivationFunction=null;#isMainPromiseResolved=!1;CMDSTATE=r.CMDSTATES;CMDTYPE=r.CMDTYPES;VIEWSTATE=r.CMDSTATES;STANDARD_BUTTONS=u;ADA_TYPE=L.ADA_TYPE;POPUP_BTN_OK=1;POPUP_BTN_CANCEL=2;POPUP_DEFAULT_TYPE=0;POPUP_INFO_TYPE=1;POPUP_WARN_TYPE=2;POPUP_ERROR_TYPE=3;MESSAGE_LEVEL=c;constructor(){T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"> BaseViewModel::BaseViewModel"),T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"< BaseViewModel::BaseViewModel")}observe(e){return T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`> | VIEW BaseViewModel::observe(${e}) of ${window.location.href}`),e?this.observableAreaId=e:(this.observableArea=null,T.error(`The observableAreaId=${e} is not valid ! To ensure correct functionality please deliver a valid DOM id to observe via knockoutjs.`)),T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"< BaseViewModel::observe"),this}onInitialized(){T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`> BaseViewModel::onInitialized() for ${this.observableAreaId}, viewKey: ${this.viewKey}`),T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"< BaseViewModel::onInitialized")}onScannedLabel(e){return T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`. BaseViewModel::onScannedLabel key:'${e}'`),e}isAdaEnabled(){return L._adaEnabled}onInitTextAndData(e){T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`> BaseViewModel::onInitTextAndData() for ${this.observableAreaId}`);let t=[],i=[];return e.dataKeys=[].concat.apply([],e.dataKeys),e.textKeys=[].concat.apply([],e.textKeys),o.whenActivated().then((()=>{this.staticActivationFunction&&this.staticActivationFunction()})),T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"< BaseViewModel::onInitTextAndData"),A.Promises.promise(((a,s)=>{A.Promises.Promise.all(e.textKeys).then((i=>{T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`* | VIEW onInitTextAndData Promise all, textKeys res=${JSON.stringify(i)}`);for(let e=i.length-1;e>=0;e--){let a=i[e];Array.isArray(a)?t=t.concat(a):a&&t.push(a)}return this.textKeys=this.textKeys.concat(t),T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`* | VIEW onInitTextAndData for ${this.observableAreaId} received all textKeys`),A.Promises.Promise.all(e.dataKeys)})).then((e=>{T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`* | VIEW onInitTextAndData Promise all, dataKeys res=${JSON.stringify(e)}`);for(let t=e.length-1;t>=0;t--){let a=e[t];Array.isArray(a)?i=i.concat(a):a&&i.push(a)}T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`* | VIEW onInitTextAndData for ${this.observableAreaId} received all dataKeys`),this.dataKeys=this.dataKeys.concat(i)})).then((e=>a(e)),(e=>s(e)))}))}initTextAndData(e=[],t=[]){T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`> BaseViewModel::initTextAndData() for ${this.observableAreaId}`),T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`. BaseViewModel::initTextAndData([${e}], [${t}])`);const i=this;let a;function s(e){T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"> BaseViewModel::getTranslatedText(...)");let t=A.Promises.promise((function(t){e.length>0?i.serviceProvider.LocalizeService.getText(e,function(e){let a,s=[];T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"> BaseViewModel::getTranslatedTextCallback()");for(let t in e)e.hasOwnProperty(t)&&null!==e[t]?(a=d.getGuiKeySuffixPart(t,i.viewKey),i.labels&&i.labels.has(a)?(T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`. BaseViewModel::getTranslatedTextCallback(), setting text '${a}' -> '${e[t]}' for ${i.observableAreaId}`),i.labels.set(a,e[t])):i.labels&&(T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`. BaseViewModel::getTranslatedTextCallback(), pushing text '${a}' -> '${e[t]}' for ${i.observableAreaId}`),i.labels.push(a,e[t]))):e.hasOwnProperty(t)&&null===e[t]&&t.endsWith("_ADA_Clicked")&&s.push(t);T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"* BaseViewModel::getTranslatedTextCallback nullArray: "+s),s.forEach((e=>{const t=d.getGuiKeySuffixPart(e,i.viewKey);if(i.labels){let e=t.replace("_Clicked",""),s=i.labels.get(e);s&&(s=s(),i.labels.has(a)?(T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`. BaseViewModel::getTranslatedTextCallback(), setting spare text '${t}' -> '${s}' for ${i.observableAreaId}`),i.labels.set(t,s)):(T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`. BaseViewModel::getTranslatedTextCallback(), pushing spare text '${t}' -> '${s}' for ${i.observableAreaId}`),i.labels.push(t,s)))}})),i.onTextReady(e),t(e),T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"< BaseViewModel::getTranslatedTextCallback")}.bind(i),!0,n.popupOptions.type?()=>{}:void 0):(T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`. BaseViewModel::getTranslatedText resolve for ${i.observableAreaId}`),t())}));return T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"< BaseViewModel::getTranslatedText"),t}function o(e){return T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"> BaseViewModel::getDataValues(...)"),A.Promises.promise((function(t){function a(e){for(let t in e)if(e.hasOwnProperty(t)&&i.viewStateKeys.includes(t)){let a=e[t];T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`. BaseViewModel::updateVisualStatesHelper changing ${t}=${a}`);let s=r.getCommandsByViewStateKey(t);for(let e=0;e<s.length;e++){let t=s[e];if(""===a||isNaN(a)){let e=i.extractViewStateFromConfig(t,t.initialViewState);T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`. BaseViewModel::updateVisualStatesHelper invalid value '${a}' - using default/initialViewState: ${e}`),a=-1!==e?e:i.CMDSTATE.ENABLED}b.bind(i)(t,a)}}}e.length>0?i.serviceProvider.DataService.getValues(e,function(e){T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"> BaseViewModel::getDataValuesCallback(...)"),a(e),i.onDataValuesReady(e),t(e),T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"< BaseViewModel::getDataValuesCallback")}.bind(i),function(e){T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`> BaseViewModel::dataValuesChangedInternal(${JSON.stringify(e)}) - ${i.observableAreaId}`),a(e),i.onDataValuesChanged(e),T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`. BaseViewModel::dataValuesChangedInternal, reload=${JSON.stringify(i.viewConfig.reload)}`);for(let t in e)if(e.hasOwnProperty(t)&&i.viewConfig.reload&&i.viewConfig.reload.includes(t)){i.serviceProvider.LocalizeService.updateTexts();break}T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"< BaseViewModel::dataValuesChangedInternal")}.bind(i)):(T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`. BaseViewModel::getDataValues resolve for ${i.observableAreaId}`),t()),T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"< BaseViewModel::getDataValues")}))}if(i.textKeys=i.textKeys.map((e=>d.buildGuiKey(i.viewKey,d.getGuiKeySuffixPart(e)))),e=i.textKeys=[...new Set(e.concat(i.textKeys))],i.designMode)e=[],t=[];else{let a=[];i.viewConfig.reload&&(a=i.viewConfig.reload),t=t.concat(i.viewStateKeys).concat(a).concat(i.dataKeys),T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`. BaseViewModel::initTextAndData - extended textKeys:${e}`),T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`. BaseViewModel::initTextAndData - extended dataKeys:${t}`)}i.__initializedTextAndData=!0,i.#isMainPromiseResolved=!1;try{a=A.Promises.promise((function(a,l){A.Promises.Promise.all([o.bind(i)(t),s.bind(i)(e)]).then((e=>{let t={dataKeys:e[0],textKeys:e[1]};i.onInitialized(t),T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`. BaseViewModel::initTextAndData main resolve for ${i.observableAreaId}`),i.#isMainPromiseResolved=!0,a(t)})).catch((e=>l(e)))}))}catch(e){a=A.Promises.Promise.reject(e),i.handleError(e,"Problem in initTextAndData")}return T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"< BaseViewModel::initTextAndData"),a}extractViewStateFromConfig(t,i){if(!t.ignoreState&&!this.#isMainPromiseResolved){let a=t.id,s=this.viewConfig?.commandconfig;if("object"==typeof s&&a in s){let o=s[a];if(e.isNumeric(o))i=parseInt(o),T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`* BaseViewModel::extractViewStateFromConfig from command config for '${a}', state=${i}`);else{let e=o,s=null;if(o.includes(";")){let t=o.split(";");e=t[0],s=t[1]}s&&(i=n.convertToInt(s,i)),this.viewStateKeys.includes(e)||this.viewStateKeys.push(e),t.viewState.key=e,T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`* BaseViewModel::extractViewStateFromConfig from command config (${e}) for '${a}', state=${i}, defaultViewState=${s}`)}}}return T.LOG_INFO&&T.log(T.LOG_INFO,`* BaseViewModel::extractViewStateFromConfig from command config for '${t?.id}', returned state=${i} while isMainPromiseResolved=${this.#isMainPromiseResolved}`),i}getLabel(e,i="",a=null,o=null){o&&(a=o);const l=this;let r;-1!==e.indexOf(p)&&(e=this.replaceViewKeyPattern(e)),-1!==e.indexOf("[#")&&(e=this.onScannedLabel(e));const L=d.getGuiKeySuffixPart(e,this.viewKey).toLowerCase();return r=this.labels.getLabel(L,i,a),t.unwrap(r)!==this.labels.VALUE_NOT_AVAILABLE||s.designMode||(r(""),this.__initializedTextAndData?this.serviceProvider.LocalizeService.getText([e],(t=>{let i="";t[e]&&(i=t[e]),T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`* BaseViewModel::getLabel retry for: '${L}' returns '${i}'`),l.labels.set(L,i)}),!0,n.popupOptions.type?()=>{}:void 0):this.textKeys.includes(e)||this.textKeys.push(e)),a?t.pureComputed((()=>{let e=l.labels.labelItems.get(L);return e?l.labels.resolveVars(e,a):""}),l):r}getViewStateFromProperty(e,i=this.CMDSTATE.ENABLED){let a;const o=this.viewStatePropertyMap[e];return o?a=o:(a=t.isObservable(i)?i:t.observable(parseInt(i)),this.viewStatePropertyMap[e]=a,s.designMode||this.serviceProvider.DataService.getValues([e],(t=>{t[e]&&(a(parseInt(t[e])),this.viewStatePropertyMap[e]=a)}),function(e,t){e in this.viewStatePropertyMap&&this.viewStatePropertyMap[e](parseInt(t[e]))}.bind(this,e))),a}suspendAdaSubscriptions(){L._suspendAdaInputFieldSubscriptions=!0}resumeAdaSubscriptions(){L._suspendAdaInputFieldSubscriptions=!1}notifyViewUpdated(e,t){T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`> BaseViewModel::notifyViewUpdated(${e}, ${t})`),n.notifyViewUpdated(e,t),T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"< BaseViewModel::notifyViewUpdated")}createComputedObservable(e,i,a){let s;T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"> BaseViewModel::createComputedObservable(...)");try{let a=e;"object"==typeof e&&"function"==typeof e.read?(a=e,void 0!==typeof e.write&&"function"==typeof e.write||T.error("BaseViewModel::createComputedObservable: please use function or Object with read and write functions as argument")):"function"==typeof e&&(a=Object.create(null),a.read=e,a.write=function(e){T.LOG_DETAIL&&T.error(`BaseViewModel::createComputedObservable tried to write ${e} to computed... read function is: ${a.read}`)}),s=t.computed(a,i||null),this.subscriptions.push(s)}catch(e){this.handleError(e,`BaseViewModel::createComputedObservable ViewKey: ${this.viewKey} / observableAreaId: ${this.observableAreaId}`)}return"function"==typeof a&&(T.LOG_DETAIL&&T.log(T.LOG_DETAIL,". BaseViewModel::createComputedObservable creating subscription"),this.subscribeToObservable(s,a)),T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"< BaseViewModel::createComputedObservable"),s}subscribeToObservable(e,i){let a;return T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"> BaseViewModel::subscribeToObservable(...)"),t.isObservable(e)&&"function"==typeof i?(a=e.subscribe(i),this.subscriptions.push(a)):T.error(`BaseViewModel::subscribeToObservable - invalid arguments! observable: ${e} / valueChangedHandler: ${i}`),T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`< BaseViewModel::subscribeToObservable returns success: ${!!a}, current subscriptions: ${this.subscriptions.length}`),a}onDataValuesChanged(e){T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"> BaseViewModel::onDataValuesChanged()"),this.onDataValuesReady(e),T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"< BaseViewModel::onDataValuesChanged")}onAdaPrepared(){}onBeforeApplyBindings(){}onAfterApplyBindingsSync(e){this.lifeCycleMode===o.LIFE_CYCLE_MODE.STATIC&&(this.staticActivationFunction=e),e()}onAfterApplyBindings(){}onTextReady(e){}onDataValuesReady(e){}onTimeout(){}onCancel(){}onContinue(){}onViewModelEvent(e,t){}applyBindings(e){T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"> BaseViewModel::applyBindings");let i=!1;return this.observableAreaId&&(this.observableArea=e,i=!!e),A.Promises.promise(((e,a)=>{if(!i)return this.observableArea=null,void a(`The observableAreaId=${this.observableAreaId} is not valid ! To ensure correct functionality please deliver a valid DOM id to observe via knockoutjs.`);try{this.onBeforeApplyBindings(),this.__bindingsApplied||(T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`. BaseViewModel::applyBindings - start apply for observableArea=${this.observableAreaId}`),t.applyBindings(this,this.observableArea),T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`. BaseViewModel::applyBindings - ready applying bindings observableArea=${this.observableAreaId}`)),this.onAfterApplyBindings(),this.onAfterApplyBindingsSync(function(){T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"> BaseViewModel::onAfterApplyBindingsSyncCallback()"),this.__bindingsApplied=!0,e(),T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`< BaseViewModel::onAfterApplyBindingsSyncCallback observableArea=${this.observableAreaId}`)}.bind(this))}catch(e){a(e),this.handleError(e,`Problem during applyBindings observableAreaId=${this.observableAreaId}${""===this.observableAreaId?" observableArea id is empty, this causes always errors, please provide an id":""}`)}finally{T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`< BaseViewModel::applyBindings observableArea=${this.observableAreaId}`)}}))}onButtonPressed(e){T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`> BaseViewModel::onButtonPressed(${e})`),s.designMode?this.designTimeRunner.action(e,this):e===u.CANCEL?n.cancelView():I.endView(I.UIRESULT_OK,e),T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"< BaseViewModel::onButtonPressed")}handleError(e,t){T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"> BaseViewModel::handleError(exception, message)"),s.designMode?T.error(`BaseViewModel::handleError: '${this.observableAreaId}' ${t||""}: ${e}`):this.serviceProvider.propagateError(`BaseViewModel::handleError '${this.observableAreaId}', message='${t}'`,"OTHER",e),T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"< BaseViewModel::handleError")}showPopupMessage(e,t,i){T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`> BaseViewModel::showPopupMessage(component=${e}, options=${JSON.stringify(t)})`),n.showPopupMessage(e,t,i),T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"< BaseViewModel::showPopupMessage")}hidePopupMessage(){return T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"> BaseViewModel::hidePopupMessage()"),T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"< BaseViewModel::hidePopupMessage"),n.hidePopupMessage()}getPopupOptions(){T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"> BaseViewModel::getPopupOptions()");const e=n.popupOptions;return T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`< BaseViewModel::getPopupOptions returns ${JSON.stringify(e)}`),e}showPopupHint(e,t,i,a){T.LOG_DETAIL&&T.log(T.LOG_DETAIL,`> BaseViewModel::showPopupHint(msg=${e}, type=${t} id=${i})`),n.triggerEvent("uipopuphint",{msg:e,type:t,id:i,callback:a}),T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"< BaseViewModel::showPopupHint")}removePopupHint(e=null,t=!1){T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"> BaseViewModel::removePopupHint()"),n.triggerEvent("uiremovepopup",{callback:e,immediate:t}),T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"< BaseViewModel::removePopupHint")}buildGuiKey(...e){return e.unshift(this.viewKey),d.buildGuiKey.apply(this,e)}buildGuiEventKey(...e){return e.unshift(this.viewKey,"Event"),d.buildGuiKey.apply(this,e)}replaceViewKeyPattern(e){return e.replace(p,this.viewKey)}setViewKey(e){this.viewKey=e,this.viewKeyObservable(e)}onDeactivated(){T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"> BaseViewModel::onDeactivated()"),this.bankingContext=E,this.viewStatePropertyMap.length=0,this.viewStateKeys.length=0,this.dataKeys.length=0,this.#isMainPromiseResolved=!1,T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"< BaseViewModel::onDeactivated")}onReactivated(){T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"> BaseViewModel::onReactivated()");let e=r.getCommandsByViewModel(this);for(let t=0;t<e.length;t++){let i=e[t];i.ignoreState||this.extractViewStateFromConfig(i,i.initialViewState)}T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"< BaseViewModel::onReactivated")}clean(){T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"> BaseViewModel::clean()"),this.dataKeys=[],this.textKeys=[];for(let e=0;e<this.subscriptions.length;e++)this.subscriptions[e].dispose();this.viewStateKeys=[],this.subscriptions=[],this.ada=null,this.labels.removeAll(),this.labels=null,!this.designMode&&n.popupOptions.type&&this.serviceProvider.LocalizeService.cleanTranslationTexts(!1),T.LOG_DETAIL&&T.log(T.LOG_DETAIL,"< BaseViewModel::clean")}}}));