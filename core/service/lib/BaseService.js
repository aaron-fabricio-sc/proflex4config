/**
 @preserve
 Copyright (c) 2001-2020 by Wincor Nixdorf International GmbH,
 Heinz-Nixdorf-Ring 1, 33106 Paderborn, Germany

 This software is the confidential and proprietary information
 of Diebold Nixdorf.
 You shall not disclose such Confidential Information and shall
 use it only in accordance with the terms of the license agreement
 you entered into with Diebold Nixdorf.



$MOD$ BaseService.js 4.3.1-210203-21-1b8704b6-1a04bc7d
*/
let _logger,_serviceEventObjMap={},_eventDelegatesMap=new Map,_serviceReadyEventRegisteringDone=!1,_registrationId=0;const getServiceClass=({Wincor:e,ext:r,jQuery:t,LogProvider:g,GatewayProvider:i})=>class{whenReady=null;gateway=null;responseMap=null;requestMap=null;eventMap=null;serviceProvider=null;logger=null;NAME="";REQUEST=null;RESPONSE=null;EVENT=null;SERVICE_EVENTS=null;ERROR_TYPE={REQUEST:"REQUEST",RESPONSE:"RESPONSE",EVENT:"EVENT",OTHER:"OTHER"};DISPOSAL_TRIGGER_DEACTIVATE="DEACTIVATE";DISPOSAL_TRIGGER_UNLOAD="UNLOAD";DISPOSAL_TRIGGER_ONETIME="ONETIME";DISPOSAL_TRIGGER_SHUTDOWN="SHUTDOWN";REQUEST_RESPONSE_OK="0";REQUEST_RESPONSE_ERROR="2";EventRegistration=function(){this.registrationId=-1,this.callback=null,this.persistent=!1,this.trigger=null};constructor(r,{ServiceProvider:t}){this.NAME=r,this.responseMap=new Map,this.requestMap=new Map,this.eventMap=new Map,this.serviceProvider=t,_logger=g,this.logger=_logger;let s="";_logger.LOG_SRVC_INOUT&&arguments&&arguments.length>2&&(s=`, ${Object.values(arguments).slice(2)}`),_logger.LOG_SRVC_INOUT&&_logger.log(_logger.LOG_SRVC_INOUT,`> BaseService::BaseService[${this.NAME}](${r}, ServiceProvider: ${t}${s})`),this.REQUEST=Object.assign({},e.UI.Gateway.prototype.REQUEST),this.RESPONSE=Object.assign({},e.UI.Gateway.prototype.RESPONSE),this.EVENT=Object.assign({},e.UI.Gateway.prototype.EVENT),this.gateway=i.getGateway(),this.whenReady=null,_logger.LOG_SRVC_INOUT&&_logger.log(_logger.LOG_SRVC_INOUT,`< BaseService::BaseService[${this.NAME}]`)}translateResponse(e){return e}onResponse(e){try{if(_logger.LOG_SRVC_INOUT&&_logger.log(_logger.LOG_SRVC_INOUT,`> Service::onResponse('${JSON.stringify(e)}')`),this.responseMap.has(e.callbackIdx)){let r=this.responseMap.get(e.callbackIdx);r?r(this.translateResponse(e)):_logger.LOG_SRVC_DATA&&_logger.log(_logger.LOG_SRVC_DATA,`. delegate for index '${e.callbackIdx}' is null.`),this.responseMap.delete(e.callbackIdx)}else _logger.LOG_SRVC_DATA&&_logger.log(_logger.LOG_SRVC_DATA,`. No callback found for index '${e.callbackIdx}'.`);_logger.LOG_SRVC_INOUT&&_logger.log(_logger.LOG_SRVC_INOUT,"< Service::onResponse")}catch(e){this.serviceProvider.propagateError(this.NAME,this.ERROR_TYPE.RESPONSE,e)}}onRequest(e){try{if(_logger.LOG_SRVC_INOUT&&_logger.log(_logger.LOG_SRVC_INOUT,`> Service::onRequest('${JSON.stringify(e)}')`),this.requestMap.has(e.methodName)){let r=this.requestMap.get(e.methodName);r?r(e):_logger.LOG_SRVC_DATA&&_logger.log(_logger.LOG_SRVC_DATA,`. delegate for method '${e.methodName}' is null.`)}else _logger.LOG_SRVC_DATA&&_logger.log(_logger.LOG_SRVC_DATA,`. No callback found for method '${e.methodName}'.`);_logger.LOG_SRVC_INOUT&&_logger.log(_logger.LOG_SRVC_INOUT,"< Service::onRequest")}catch(e){this.serviceProvider.propagateError(this.NAME,this.ERROR_TYPE.REQUEST,e)}}onEvent(e){try{if(_logger.LOG_SRVC_INOUT&&_logger.log(_logger.LOG_SRVC_INOUT,`> Service::onEvent('${JSON.stringify(e)}')`),this.eventMap.has(e.eventName)){let r=this.eventMap.get(e.eventName);r?r(e):_logger.LOG_SRVC_DATA&&_logger.log(_logger.LOG_SRVC_DATA,`. delegate for event '${e.eventName}' is null.`)}else _logger.LOG_SRVC_DATA&&_logger.log(_logger.LOG_SRVC_DATA,`. No callback found for event '${e.eventName}'.`);_logger.LOG_SRVC_INOUT&&_logger.log(_logger.LOG_SRVC_INOUT,"< Service::onEvent")}catch(e){this.serviceProvider.propagateError(this.NAME,this.ERROR_TYPE.EVENT,e)}}sendRequest(e,r){return e=this.gateway.sendRequest(e,(e=>this.responseMap.set(e,r)))}sendResponse(e,r){return e=this.gateway.sendResponse(e,r)}sendEvent(e){return e=this.gateway.sendEvent(e)}installServiceEvents(){this.SERVICE_EVENTS&&"object"==typeof this.SERVICE_EVENTS&&(Object.keys(this.SERVICE_EVENTS).forEach((e=>{if(e in _serviceEventObjMap)throw`${this.NAME} tried to install SERVICE_EVENT ${e}, but this is already installed by ${_serviceEventObjMap[e]}`;_serviceEventObjMap[e]=this.NAME})),_logger.LOG_SRVC_DATA&&_logger.log(_logger.LOG_SRVC_DATA,`. Service::installServiceEvents[${this.NAME}]${JSON.stringify(this.SERVICE_EVENTS)} succeeded.`))}registerForServiceEvent(e,r,t){_logger.LOG_SRVC_INOUT&&_logger.log(_logger.LOG_SRVC_INOUT,`> Service::registerForServiceEvent[${this.NAME}](${e}, ..., persistent: ${t})`);try{if(e in _serviceEventObjMap&&r&&"function"==typeof r){let g=new this.EventRegistration;_registrationId++,g.registrationId=_registrationId;let i=typeof t;return"string"===i?t!==this.DISPOSAL_TRIGGER_DEACTIVATE&&t!==this.DISPOSAL_TRIGGER_UNLOAD&&t!==this.DISPOSAL_TRIGGER_ONETIME&&t!==this.DISPOSAL_TRIGGER_SHUTDOWN||(g.trigger=t,t=!1):("boolean"===i||(t=!1),g.trigger=this.DISPOSAL_TRIGGER_DEACTIVATE),g.callback=r,g.persistent=t,_eventDelegatesMap.has(e)?_eventDelegatesMap.get(e).push(g):_eventDelegatesMap.set(e,[g]),_logger.LOG_SRVC_INOUT&&_logger.log(_logger.LOG_SRVC_INOUT,`< Service::registerForServiceEvent[${this.NAME}] returns regId: ${_registrationId}`),_registrationId}}catch(e){this.serviceProvider.propagateError(this.NAME,this.ERROR_TYPE.OTHER,e)}return _logger.log(_logger.LOG_ANALYSE,`. Service::registerForServiceEvent[${this.NAME}] WARNING: Could not register for serviceEventName=${e}`),-1}deregisterFromServiceEvent(e){let r,t;_logger.LOG_SRVC_INOUT&&_logger.log(_logger.LOG_SRVC_INOUT,"> Service::deregisterFromServiceEvents()");let g=void 0===e;for(let[i,s]of _eventDelegatesMap){for(r=s.length-1;r>=0;r--)if(t=s[r],(g||t.registrationId===e)&&(t.callback=null,s.splice(r,1),!g))return _logger.LOG_SRVC_INOUT&&_logger.log(_logger.LOG_SRVC_INOUT,"< Service::deregisterFromServiceEvents returns: true"),!0;0===s.length&&_eventDelegatesMap.delete(i)}return _logger.LOG_SRVC_INOUT&&_logger.log(_logger.LOG_SRVC_INOUT,"< Service::deregisterFromServiceEvents returns: "+(g?"all registrations cleared":"false")),!!g}deregisterServiceEvents(e,r){_logger.LOG_SRVC_INOUT&&_logger.log(_logger.LOG_SRVC_INOUT,`> Service::deregisterServiceEvents[${this.NAME}](trigger: ${e}, eventName: ${r})`);let t,g,i,s=0;for(let[_,o]of _eventDelegatesMap){for(t=o.length-1;t>=0;t--)g="string"!=typeof r||r===_,i=o[t],!i.persistent&&i.trigger===e&&g&&(_logger.LOG_DETAIL&&_logger.log(_logger.LOG_DETAIL,`. removing ${_} regId <${i.registrationId}> of ${this.NAME}`),i.callback=null,o.splice(t,1),0===o.length&&_eventDelegatesMap.delete(_));o&&(s+=o.length)}_logger.LOG_SRVC_INOUT&&_logger.log(_logger.LOG_SRVC_INOUT,`< Service::deregisterServiceEvents[${this.NAME}] delegatesLeft: ${s}`)}hasReceivers(e){return _eventDelegatesMap.has(e)&&_eventDelegatesMap.get(e).length>0}fireServiceEvent(e,r){_logger.LOG_SRVC_INOUT&&_logger.log(_logger.LOG_SRVC_INOUT,`> Service::fireServiceEvent[${this.NAME}](serviceEventName: ${e}, data: ${JSON.stringify(r)})`);let t,g=!1;if(_serviceEventObjMap[e]===this.NAME){if(_eventDelegatesMap.has(e)){let i=_eventDelegatesMap.get(e);for(t=i.length-1;t>=0;t--)if("function"==typeof i[t].callback){_logger.LOG_SRVC_DATA&&_logger.log(_logger.LOG_SRVC_DATA,`. Service::fireServiceEvent calling regId <${i[t].registrationId}>`);try{let e=!!i[t].callback(r);g=g||e}catch(e){return this.serviceProvider.propagateError(this.NAME,this.ERROR_TYPE.OTHER,e),!1}}this.deregisterServiceEvents(this.DISPOSAL_TRIGGER_ONETIME,e)}}else _logger.error(`Error! Not allowed! ${this.NAME} tried to send foreign SERVICE_EVENT ${e}!`);return _logger.LOG_SRVC_INOUT&&_logger.log(_logger.LOG_SRVC_INOUT,`< Service::fireServiceEvent[${this.NAME}]`),g}retrieveJSONData(e){let g=this.serviceProvider.baseUrl;return r.Promises.promise(((r,i)=>t.getJSON(g+(-1===e.lastIndexOf(".json")?e+".json":e),r).fail((e=>i(e)))))}onServicesReady(){_logger.LOG_SRVC_INOUT&&_logger.log(_logger.LOG_SRVC_INOUT,"> Service::onServicesReady()"),this.ready=!0;const e=this,t=this.serviceProvider.ViewService;return!_serviceReadyEventRegisteringDone&&t&&(this.registerForServiceEvent(t.SERVICE_EVENTS.VIEW_CLOSING,(function(){e.deregisterServiceEvents(e.DISPOSAL_TRIGGER_DEACTIVATE)}),!0),this.registerForServiceEvent(t.SERVICE_EVENTS.VIEW_BEFORE_CHANGE,(function(){e.deregisterServiceEvents(e.DISPOSAL_TRIGGER_UNLOAD),e.deregisterServiceEvents(e.DISPOSAL_TRIGGER_ONETIME)}),!0),this.registerForServiceEvent(t.SERVICE_EVENTS.SHUTDOWN,(function(){e.deregisterServiceEvents(e.DISPOSAL_TRIGGER_DEACTIVATE),e.deregisterServiceEvents(e.DISPOSAL_TRIGGER_UNLOAD),e.deregisterServiceEvents(e.DISPOSAL_TRIGGER_ONETIME),e.deregisterServiceEvents(e.DISPOSAL_TRIGGER_SHUTDOWN)}),!0),_serviceReadyEventRegisteringDone=!0),_logger.LOG_SRVC_INOUT&&_logger.log(_logger.LOG_SRVC_INOUT,"< Service::onServicesReady"),r.Promises.Promise.resolve()}onSetup(e){return r.Promises.Promise.resolve()}onError(e,r,t){}setGateway(e){this.gateway=e}convertToBoolean(e){return!!e&&(!0===e||(isNaN(e)?"true"===e.toLowerCase():parseInt(e)>0))}};export default getServiceClass;